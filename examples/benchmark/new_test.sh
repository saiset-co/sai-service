#!/bin/bash

# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
# –û—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

# =============================================================================
# –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–ö–£–©–ò–• –¢–ï–°–¢–ê–•:
# =============================================================================
# 1. run_complete_test.sh –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ~8K RPS —Å—Ä–µ–¥–Ω–µ–µ
# 2. max_rps.sh –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 79K RPS –ø—Ä–∏ 100 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
# 3. –û–≥—Ä–æ–º–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# =============================================================================
# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
# =============================================================================

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SERVICE_URL="http://localhost:8081"
SERVICE_PORT=8081

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï
declare -A TEST_CONFIGS=(
    # –§–æ—Ä–º–∞—Ç: "test_name:duration:connections:qps:description"
    ["baseline"]="60:10:500:–ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è - –Ω–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
    ["warmup"]="30:50:1000:–ü—Ä–æ–≥—Ä–µ–≤ —Å–∏—Å—Ç–µ–º—ã"
    ["normal_load"]="120:100:2000:–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
    ["increased_load"]="120:200:5000:–£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
    ["high_load"]="120:500:10000:–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
    ["stress_test"]="60:1000:0:–°—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è RPS)"
    ["peak_capacity"]="180:2000:0:–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
    ["endurance"]="600:500:3000:–¢–µ—Å—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ (10 –º–∏–Ω—É—Ç)"
)

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ENDPOINTS=(
    "/ping"
    "/hello/testuser"
    "/data"
    "/health"
)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITORING_INTERVAL=1  # —Å–µ–∫—É–Ω–¥—ã
CPU_THRESHOLD=80      # –ø—Ä–æ—Ü–µ–Ω—Ç
MEMORY_THRESHOLD=80   # –ø—Ä–æ—Ü–µ–Ω—Ç
LATENCY_THRESHOLD=50  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

# =============================================================================
# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================

run_optimized_test() {
    local test_name=$1
    local duration=$2
    local connections=$3
    local qps=$4
    local endpoint=${5:-"/ping"}
    local description=$6

    echo "üöÄ OPTIMIZED TEST: $test_name"
    echo "   Description: $description"
    echo "   Duration: ${duration}s"
    echo "   Connections: $connections"
    echo "   Target QPS: $([ $qps -eq 0 ] && echo "Unlimited" || echo $qps)"
    echo "   Endpoint: $endpoint"

    local output_file="$RESULTS_DIR/${test_name}_optimized.txt"
    local start_time=$(date +%s)

    # –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É hey —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    local hey_cmd="hey"
    hey_cmd+=" -z ${duration}s"           # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    hey_cmd+=" -c $connections"           # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    hey_cmd+=" -t 30"                     # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
    hey_cmd+=" -disable-compression"      # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    hey_cmd+=" -disable-keepalive"        # –û—Ç–∫–ª—é—á–∞–µ–º keep-alive –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏

    # –î–æ–±–∞–≤–ª—è–µ–º QPS —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
    if [ $qps -gt 0 ]; then
        hey_cmd+=" -q $qps"
    fi

    hey_cmd+=" \"$SERVICE_URL$endpoint\""

    echo "   Command: $hey_cmd"
    echo "   Starting test..."

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    timeout $((duration + 60)) bash -c "$hey_cmd" > "$output_file" 2>&1
    local test_exit_code=$?

    local end_time=$(date +%s)
    local actual_duration=$((end_time - start_time))

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if [ $test_exit_code -eq 0 ] && [ -f "$output_file" ]; then
        analyze_test_results "$output_file" "$test_name" "$qps"
    else
        echo "   ‚ùå TEST FAILED (exit code: $test_exit_code, duration: ${actual_duration}s)"
        echo "   üìÑ Checking output file..."
        if [ -f "$output_file" ]; then
            echo "   Last 10 lines of output:"
            tail -10 "$output_file" | sed 's/^/      /'
        fi
    fi

    echo ""
}

# =============================================================================
# –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
# =============================================================================

analyze_test_results() {
    local output_file=$1
    local test_name=$2
    local target_qps=$3

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π –æ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    local actual_rps=$(grep "Requests/sec:" "$output_file" | awk '{print $2}' | head -1 | tr -d '\n\r\t ')
    local total_requests=$(grep "Total:" "$output_file" | awk '{print $2}' | head -1 | tr -d '\n\r\t ')
    local avg_latency=$(grep -A 1 "Average:" "$output_file" | head -1 | awk '{print $2}' | tr -d '\n\r\t ')
    local p95_latency=$(grep "95% in" "$output_file" | awk '{print $3}' | head -1 | tr -d '\n\r\t ')
    local p99_latency=$(grep "99% in" "$output_file" | awk '{print $3}' | head -1 | tr -d '\n\r\t ')

    # –°—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
    local errors=0
    local error_lines=$(grep -E "Non-2xx|timeout|error|failed" "$output_file" 2>/dev/null | wc -l)
    if [ "$error_lines" -gt 0 ]; then
        errors=$error_lines
    fi

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    local success_codes=$(grep "\[200\]" "$output_file" | awk '{print $2}' | tr -d '\n\r\t ' || echo "0")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
    if ! [[ "$actual_rps" =~ ^[0-9]+\.?[0-9]*$ ]] || [ -z "$actual_rps" ]; then
        actual_rps="0"
    fi
    if ! [[ "$errors" =~ ^[0-9]+$ ]] || [ -z "$errors" ]; then
        errors="0"
    fi
    if ! [[ "$success_codes" =~ ^[0-9]+$ ]] || [ -z "$success_codes" ]; then
        success_codes="0"
    fi

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    local efficiency="N/A"
    if [ "$target_qps" -gt 0 ] && [[ "$actual_rps" =~ ^[0-9]+\.?[0-9]*$ ]]; then
        efficiency=$(awk "BEGIN {printf \"%.1f\", ($actual_rps / $target_qps) * 100}")
    fi

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    echo "   üìä RESULTS:"
    echo "      Total Requests: ${total_requests:-N/A}"
    echo "      Actual RPS: ${actual_rps:-N/A}"
    echo "      Target Efficiency: ${efficiency}%"
    echo "      Average Latency: ${avg_latency:-N/A}"
    echo "      95th Percentile: ${p95_latency:-N/A}"
    echo "      99th Percentile: ${p99_latency:-N/A}"
    echo "      Success Responses: ${success_codes:-N/A}"
    echo "      Errors: ${errors:-0}"

    # –£–ü–†–û–©–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    local status="SUCCESS"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—Ö

    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if [ "$actual_rps" = "0" ] || [ -z "$actual_rps" ]; then
        status="NO_DATA"
    elif ! [[ "$actual_rps" =~ ^[0-9]+\.?[0-9]*$ ]]; then
        status="NO_DATA"
    elif [ "$errors" -gt 100 ]; then
        status="HIGH_ERRORS"
    elif [[ "$efficiency" =~ ^[0-9]+\.?[0-9]*$ ]]; then
        # –ï—Å–ª–∏ efficiency –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë
        if awk "BEGIN {exit !($efficiency >= 80)}" 2>/dev/null; then
            status="SUCCESS"
        elif awk "BEGIN {exit !($efficiency >= 50)}" 2>/dev/null; then
            status="PARTIAL"
        else
            status="DEGRADED"
        fi
    fi

    case $status in
        "SUCCESS")    echo "      üéâ STATUS: SUCCESS" ;;
        "PARTIAL")    echo "      ‚ö†Ô∏è  STATUS: PARTIAL SUCCESS" ;;
        "DEGRADED")   echo "      üìâ STATUS: PERFORMANCE DEGRADED" ;;
        "HIGH_ERRORS") echo "      ‚ùå STATUS: TOO MANY ERRORS" ;;
        "LOW_RPS")    echo "      ‚ùå STATUS: RPS TOO LOW" ;;
        "NO_DATA")    echo "      ‚ùå STATUS: NO VALID DATA" ;;
        *)            echo "      ‚ùì STATUS: UNKNOWN" ;;
    esac

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    echo "$test_name,$target_qps,$actual_rps,$total_requests,$avg_latency,$p95_latency,$p99_latency,$errors,$success_codes,$efficiency,$status" >> "$RESULTS_DIR/optimized_results.csv"
}

# =============================================================================
# –ü–†–û–ì–†–ï–°–°–ò–í–ù–´–ô –ü–û–ò–°–ö –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û RPS
# =============================================================================

find_max_sustainable_rps() {
    echo "üîç FINDING MAXIMUM SUSTAINABLE RPS"
    echo "=================================="

    local connections=500  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    local duration=60      # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞

    # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö)
    local min_rps=5000      # –°–µ—Ä–≤–∏—Å –ª–µ–≥–∫–æ –≤—ã–¥–∞–µ—Ç 20K+, –Ω–∞—á–Ω–µ–º —Å 5K
    local max_rps=50000     # –†–∞–∑—É–º–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª
    local sustainable_rps=0

    echo "Starting binary search between $min_rps and $max_rps RPS..."

    while [ $((max_rps - min_rps)) -gt 1000 ]; do
        local test_rps=$(( (min_rps + max_rps) / 2 ))

        echo ""
        echo "üéØ Testing RPS: $test_rps (range: $min_rps - $max_rps)"

        run_optimized_test "binary_search_${test_rps}" $duration $connections $test_rps "/ping" "Binary search for max RPS"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–æ
        sleep 1  # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è CSV

        local last_status=$(tail -1 "$RESULTS_DIR/optimized_results.csv" | cut -d',' -f11)
        local last_actual_rps=$(tail -1 "$RESULTS_DIR/optimized_results.csv" | cut -d',' -f3)

        echo "   üìä Result: Status='$last_status', Actual RPS='$last_actual_rps'"

        if [ "$last_status" = "SUCCESS" ] || [ "$last_status" = "PARTIAL" ]; then
            # –£—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç
            sustainable_rps=$test_rps
            min_rps=$test_rps
            echo "   ‚úÖ $test_rps RPS is sustainable, testing higher..."
        else
            # –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç
            max_rps=$test_rps
            echo "   ‚ùå $test_rps RPS not sustainable, testing lower..."
        fi

        sleep 5  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    done

    echo ""
    echo "üèÜ MAXIMUM SUSTAINABLE RPS: $sustainable_rps"

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —Ç–µ—Å—Ç –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º RPS
    if [ $sustainable_rps -gt 0 ]; then
        echo ""
        echo "üîÑ Confirmation test at maximum sustainable RPS..."
        run_optimized_test "max_sustainable_confirmation" 300 $connections $sustainable_rps "/ping" "Confirmation test - 5 minutes at max RPS"
    fi

    echo $sustainable_rps
}

# =============================================================================
# –û–°–ù–û–í–ù–û–ô –°–¶–ï–ù–ê–†–ò–ô –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================

main_test_suite() {
    echo "üöÄ STARTING OPTIMIZED PERFORMANCE TEST SUITE"
    echo "============================================"

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ CSV
    echo "test_name,target_qps,actual_rps,total_requests,avg_latency,p95_latency,p99_latency,errors,success_codes,efficiency,status" > "$RESULTS_DIR/optimized_results.csv"

    # 1. –ü—Ä–æ–≥—Ä–µ–≤ —Å–∏—Å—Ç–µ–º—ã
    echo "=== PHASE 1: SYSTEM WARMUP ==="
    run_optimized_test "warmup" 30 50 1000 "/ping" "System warmup"

    # 2. –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    echo "=== PHASE 2: BASELINE TESTS ==="
    for config_key in baseline normal_load increased_load; do
        IFS=':' read -r duration connections qps description <<< "${TEST_CONFIGS[$config_key]}"
        run_optimized_test "$config_key" "$duration" "$connections" "$qps" "/ping" "$description"
    done

    # 3. –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ RPS
    echo "=== PHASE 3: FINDING MAXIMUM RPS ==="
    MAX_RPS=$(find_max_sustainable_rps)

    # 4. –¢–µ—Å—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    echo "=== PHASE 4: ENDPOINT COMPARISON ==="
    local test_rps=$((MAX_RPS / 2))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 50% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ

    for endpoint in "${ENDPOINTS[@]}"; do
        run_optimized_test "endpoint_$(echo $endpoint | tr '/' '_')" 120 500 $test_rps "$endpoint" "Endpoint comparison test"
    done

    # 5. –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    echo "=== PHASE 5: STABILITY TEST ==="
    local stable_rps=$((MAX_RPS * 80 / 100))  # 80% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
    run_optimized_test "stability" 600 500 $stable_rps "/ping" "10-minute stability test"

    echo ""
    echo "üéâ OPTIMIZED TEST SUITE COMPLETED!"
    echo "================================="
}

# =============================================================================
# =============================================================================
# –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ß–ê–°–¢–¨ –°–ö–†–ò–ü–¢–ê
# =============================================================================

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
RESULTS_DIR="./optimized_test_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$RESULTS_DIR"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if [ $# -eq 0 ]; then
    echo "üöÄ OPTIMIZED PERFORMANCE TEST SCRIPT"
    echo "===================================="
    echo ""
    echo "USAGE:"
    echo "  $0 <command> [arguments]"
    echo ""
    echo "COMMANDS:"
    echo "  find_max_rps           - –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Å—Ç–æ–π—á–∏–≤—ã–π RPS"
    echo "  full_suite             - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤"
    echo "  custom <duration> <connections> <qps> [endpoint]"
    echo "                         - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç"
    echo "  baseline               - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"
    echo ""
    echo "EXAMPLES:"
    echo "  $0 find_max_rps"
    echo "  $0 full_suite"
    echo "  $0 custom 60 200 5000 /ping"
    echo "  $0 baseline"
    echo ""
    exit 0
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
echo "üîç Checking service availability..."
if ! curl -s "$SERVICE_URL/ping" > /dev/null 2>&1; then
    echo "‚ùå Service is not available at $SERVICE_URL"
    echo "Please make sure your service is running on port $SERVICE_PORT"
    exit 1
fi
echo "‚úÖ Service is available"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if ! command -v hey >/dev/null 2>&1; then
    echo "‚ùå 'hey' tool is not installed"
    echo "Install with: go install github.com/rakyll/hey@latest"
    exit 1
fi

if ! command -v bc >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  'bc' is not installed, some calculations may not work"
fi

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
case "$1" in
    "find_max_rps")
        echo "üéØ Starting maximum RPS discovery..."
        MAX_RPS=$(find_max_sustainable_rps)
        echo ""
        echo "üèÜ FINAL RESULT: Maximum sustainable RPS = $MAX_RPS"
        ;;

    "full_suite")
        echo "üöÄ Starting full test suite..."
        main_test_suite
        ;;

    "custom")
        if [ $# -lt 4 ]; then
            echo "‚ùå Custom test requires: duration connections qps [endpoint]"
            echo "Example: $0 custom 60 200 5000 /ping"
            exit 1
        fi

        DURATION=$2
        CONNECTIONS=$3
        QPS=$4
        ENDPOINT=${5:-"/ping"}

        echo "üéØ Starting custom test..."
        echo "test_name,target_qps,actual_rps,total_requests,avg_latency,p95_latency,p99_latency,errors,success_codes,efficiency,status" > "$RESULTS_DIR/optimized_results.csv"
        run_optimized_test "custom" "$DURATION" "$CONNECTIONS" "$QPS" "$ENDPOINT" "Custom user test"
        ;;

    "baseline")
        echo "üìä Starting baseline tests..."
        echo "test_name,target_qps,actual_rps,total_requests,avg_latency,p95_latency,p99_latency,errors,success_codes,efficiency,status" > "$RESULTS_DIR/optimized_results.csv"

        run_optimized_test "warmup" 30 50 1000 "/ping" "System warmup"
        run_optimized_test "baseline" 60 100 2000 "/ping" "Baseline test"
        run_optimized_test "normal_load" 120 200 5000 "/ping" "Normal load test"

        echo ""
        echo "üìà BASELINE RESULTS:"
        echo "==================="
        column -t -s ',' "$RESULTS_DIR/optimized_results.csv"
        ;;

    *)
        echo "‚ùå Unknown command: $1"
        echo "Run '$0' without arguments to see usage"
        exit 1
        ;;
esac

echo ""
echo "üìÅ Results saved to: $RESULTS_DIR"
echo "üìã Detailed results: $RESULTS_DIR/optimized_results.csv"