# Makefile –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞

.PHONY: help build run test-perf test-quick test-stress install-tools clean

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SERVICE_NAME = perf-test-service
SERVICE_PORT = 8080
SERVICE_URL = http://localhost:$(SERVICE_PORT)

help: ## –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'

install-tools: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	@echo "üîß Installing performance testing tools..."
	@if ! command -v hey >/dev/null 2>&1; then \
		echo "Installing hey..."; \
		go install github.com/rakyll/hey@latest; \
	fi
	@if ! command -v wrk >/dev/null 2>&1; then \
		echo "Installing wrk (—Ç—Ä–µ–±—É–µ—Ç apt/brew)..."; \
		if command -v apt >/dev/null 2>&1; then \
			sudo apt update && sudo apt install -y wrk; \
		elif command -v brew >/dev/null 2>&1; then \
			brew install wrk; \
		else \
			echo "‚ùå Please install wrk manually for your system"; \
		fi \
	fi
	@echo "‚úÖ Tools installation completed"

build: ## –°–æ–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å
	@echo "üî® Building $(SERVICE_NAME)..."
	@go mod tidy
	@go build -ldflags="-s -w" -gcflags="-B -C" -o $(SERVICE_NAME) .
	@echo "‚úÖ Build completed"

run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å
	@echo "üöÄ Starting $(SERVICE_NAME) on port $(SERVICE_PORT)..."
	@go run . &
	@echo "Service PID: $$!"
	@echo "Service URL: $(SERVICE_URL)"

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å
	@echo "üõë Stopping $(SERVICE_NAME)..."
	@pkill -f "go run\\|$(SERVICE_NAME)" || true
	@echo "‚úÖ Service stopped"

test-quick: install-tools ## –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (5 –º–∏–Ω—É—Ç)
	@echo "‚ö° Running quick performance test..."
	@chmod +x performance_test.sh
	@SERVICE_URL=$(SERVICE_URL) QUICK_TEST=true ./performance_test.sh

test-perf: install-tools ## –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (15 –º–∏–Ω—É—Ç)
	@echo "üî• Running full performance test..."
	@chmod +x performance_test.sh
	@SERVICE_URL=$(SERVICE_URL) ./performance_test.sh

test-stress: install-tools ## –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)
	@echo "üí™ Running stress test..."
	@hey -z 60s -c 1000 -q 0 $(SERVICE_URL)/ping
	@echo "Stress test completed"

test-baseline: install-tools ## –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è baseline –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	@echo "üìä Running baseline performance test..."
	@echo "Testing /ping endpoint..."
	@hey -n 10000 -c 100 $(SERVICE_URL)/ping | head -20
	@echo ""
	@echo "Testing /hello/test endpoint..."
	@hey -n 5000 -c 50 $(SERVICE_URL)/hello/test | head -20

monitor: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	@echo "üìà Monitoring service resources..."
	@echo "Press Ctrl+C to stop monitoring"
	@watch -n 1 'ps aux | grep -E "(go run|$(SERVICE_NAME))" | grep -v grep; echo ""; netstat -an | grep :$(SERVICE_PORT)'

benchmark-endpoints: install-tools ## –ë–µ–Ω—á–º–∞—Ä–∫ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
	@echo "üéØ Benchmarking all endpoints..."
	@echo "=== /ping ==="
	@hey -n 1000 -c 10 $(SERVICE_URL)/ping | grep -E "(Requests/sec|Average|99%)"
	@echo ""
	@echo "=== /hello/benchtest ==="
	@hey -n 1000 -c 10 $(SERVICE_URL)/hello/benchtest | grep -E "(Requests/sec|Average|99%)"
	@echo ""
	@echo "=== /echo (POST) ==="
	@echo '{"name":"bench","data":"test"}' | hey -n 1000 -c 10 -m POST -T "application/json" -D /dev/stdin $(SERVICE_URL)/echo | grep -E "(Requests/sec|Average|99%)"
	@echo ""
	@echo "=== /data ==="
	@hey -n 500 -c 10 $(SERVICE_URL)/data | grep -E "(Requests/sec|Average|99%)"

check-health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
	@echo "üè• Checking service health..."
	@curl -s $(SERVICE_URL)/health | jq . || curl -s $(SERVICE_URL)/health

load-test-scenarios: install-tools ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	@echo "üé≠ Running load test scenarios..."
	@echo ""
	@echo "Scenario 1: Light load (normal usage)"
	@hey -z 30s -c 10 -q 100 $(SERVICE_URL)/ping | grep -E "(Total|Requests/sec|Average)"
	@echo ""
	@echo "Scenario 2: Medium load (peak hours)"
	@hey -z 30s -c 50 -q 500 $(SERVICE_URL)/ping | grep -E "(Total|Requests/sec|Average)"
	@echo ""
	@echo "Scenario 3: Heavy load (stress)"
	@hey -z 30s -c 200 -q 0 $(SERVICE_URL)/ping | grep -E "(Total|Requests/sec|Average)"

clean: ## –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
	@echo "üßπ Cleaning up..."
	@rm -rf ./perf_results
	@rm -f $(SERVICE_NAME)
	@echo "‚úÖ Cleanup completed"

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å live reload
	@echo "üîÑ Starting development mode..."
	@if command -v air >/dev/null 2>&1; then \
		air; \
	else \
		echo "Installing air for live reload..."; \
		go install github.com/cosmtrek/air@latest; \
		air; \
	fi

# –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
test-all: clean build run-background test-perf ## –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Å–±–æ—Ä–∫–∞, –∑–∞–ø—É—Å–∫, —Ç–µ—Å—Ç
	@echo "üéâ Full test cycle completed"

run-background: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å –≤ —Ñ–æ–Ω–µ
	@echo "üöÄ Starting service in background..."
	@nohup go run . > service.log 2>&1 & echo $$! > service.pid
	@sleep 2
	@echo "Service PID: $$(cat service.pid)"
	@echo "Service log: service.log"

stop-background: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
	@if [ -f service.pid ]; then \
		kill $$(cat service.pid) && rm service.pid; \
		echo "‚úÖ Background service stopped"; \
	else \
		echo "‚ùå No background service found"; \
	fi

# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
test-high: install-tools ## –í—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç (5000 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
	@echo "üî• Running high load test..."
	@chmod +x quick_high_load.sh
	@./quick_high_load.sh 5000 60 /ping

test-extreme: install-tools ## –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
	@echo "üí• Running extreme load test..."
	@chmod +x extreme_load_test.sh
	@./extreme_load_test.sh

test-find-limits: install-tools ## –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–µ–ª–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	@echo "üîç Finding performance limits..."
	@chmod +x high_load_test.sh
	@./high_load_test.sh

optimize-system: ## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
	@echo "üîß Optimizing system for high load..."
	@chmod +x optimize_system.sh
	@./optimize_system.sh

check-limits: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
	@echo "üìä Current system limits:"
	@echo "File descriptors: $(ulimit -n)"
	@echo "Max processes: $(ulimit -u)"
	@echo "Available memory: $(free -h | grep Mem | awk '{print $7}')"
	@echo "CPU cores: $(nproc)"
	@echo "Current connections: $(ss -t | wc -l)"

# –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã —Ä–∞–∑–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
test-light: install-tools ## –õ–µ–≥–∫–∏–π —Ç–µ—Å—Ç (100 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
	@hey -n 10000 -c 100 $(SERVICE_URL)/ping

test-medium: install-tools ## –°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç (1000 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
	@hey -z 60s -c 1000 $(SERVICE_URL)/ping

test-heavy: install-tools ## –¢—è–∂–µ–ª—ã–π —Ç–µ—Å—Ç (5000 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
	@hey -z 60s -c 5000 $(SERVICE_URL)/ping

test-insane: install-tools ## –ë–µ–∑—É–º–Ω—ã–π —Ç–µ—Å—Ç (20000 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
	@echo "‚ö†Ô∏è  WARNING: This may crash your system!"
	@sleep 3
	@hey -z 30s -c 20000 $(SERVICE_URL)/ping

# –¢–µ—Å—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
test-5min: install-tools ## 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–µ—Å—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏
	@./quick_high_load.sh 1000 300 /ping

test-30min: install-tools ## 30-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	@./quick_high_load.sh 500 1800 /ping

# –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
compare-endpoints: install-tools ## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
	@echo "üéØ Comparing endpoint performance..."
	@echo "=== /ping ==="
	@hey -n 5000 -c 100 $(SERVICE_URL)/ping | grep -E "(Requests/sec|Average)"
	@echo ""
	@echo "=== /hello/test ==="
	@hey -n 5000 -c 100 $(SERVICE_URL)/hello/test | grep -E "(Requests/sec|Average)"
	@echo ""
	@echo "=== /data ==="
	@hey -n 2000 -c 100 $(SERVICE_URL)/data | grep -E "(Requests/sec|Average)"
	@echo ""
	@echo "=== /echo (POST) ==="
	@echo '{"name":"test","data":"benchmark"}' | hey -n 5000 -c 100 -m POST -T "application/json" -D /dev/stdin $(SERVICE_URL)/echo | grep -E "(Requests/sec|Average)"

# –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ baseline
recommended-tests: install-tools ## –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö 16K RPS
	@echo "üéØ Recommended tests based on your 16K RPS baseline:"
	@echo ""
	@echo "1. Finding sustained maximum (10K connections)..."
	@./quick_high_load.sh 10000 120 /ping
	@echo ""
	@echo "2. Finding breaking point (20K connections)..."
	@./quick_high_load.sh 20000 60 /ping
	@echo ""
	@echo "3. Testing different endpoint..."
	@./quick_high_load.sh 5000 60 /hello/test