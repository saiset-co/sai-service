#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./monitor.sh [service_url] [duration_seconds]

SERVICE_URL=${1:-"http://localhost:8080"}
DURATION=${2:-300}  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
INTERVAL=5          # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–º–µ—Ä–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

echo "üîç Real-time Performance Monitor"
echo "================================"
echo "Service: $SERVICE_URL"
echo "Duration: ${DURATION}s"
echo "Interval: ${INTERVAL}s"
echo "Press Ctrl+C to stop"
echo ""

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
METRICS_LOG="./metrics_$(date +%Y%m%d_%H%M%S).log"
CSV_LOG="./metrics_$(date +%Y%m%d_%H%M%S).csv"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CSV
echo "timestamp,rps,avg_latency_ms,p99_latency_ms,success_rate,memory_mb,cpu_percent,connections" > "$CSV_LOG"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞
get_service_metrics() {
    local temp_file=$(mktemp)

    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    timeout 10 hey -n 100 -c 10 -t 5 "$SERVICE_URL/ping" > "$temp_file" 2>/dev/null

    if [ $? -eq 0 ]; then
        local rps=$(grep "Requests/sec:" "$temp_file" | awk '{print $2}' | sed 's/[^0-9.]//g')
        local avg_latency=$(grep "Average:" "$temp_file" | awk '{print $2}' | sed 's/[^0-9.]//g')
        local p99_latency=$(grep "99% in" "$temp_file" | awk '{print $3}' | sed 's/[^0-9.]//g')
        local success_rate=$(grep -c "200" "$temp_file")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if [[ $avg_latency == *"s"* ]]; then
            avg_latency=$(echo "$avg_latency * 1000" | bc -l 2>/dev/null | cut -d. -f1)
        fi
        if [[ $p99_latency == *"s"* ]]; then
            p99_latency=$(echo "$p99_latency * 1000" | bc -l 2>/dev/null | cut -d. -f1)
        fi

        echo "${rps:-0},${avg_latency:-0},${p99_latency:-0},${success_rate:-0}"
    else
        echo "0,0,0,0"
    fi

    rm -f "$temp_file"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
get_system_metrics() {
    local pid=$(pgrep -f "go run\\|perf-test-service" | head -1)

    if [ -n "$pid" ]; then
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB
        local memory_kb=$(ps -p "$pid" -o rss= 2>/dev/null | tr -d ' ')
        local memory_mb=$((memory_kb / 1024))

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
        local cpu_percent=$(ps -p "$pid" -o %cpu= 2>/dev/null | tr -d ' ')

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É 8080
        local connections=$(netstat -an 2>/dev/null | grep ":8080" | wc -l)

        echo "${memory_mb:-0},${cpu_percent:-0},${connections:-0}"
    else
        echo "0,0,0"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
display_metrics() {
    local timestamp=$1
    local service_metrics=$2
    local system_metrics=$3

    IFS=',' read -r rps avg_latency p99_latency success_rate <<< "$service_metrics"
    IFS=',' read -r memory_mb cpu_percent connections <<< "$system_metrics"

    printf "‚è∞ %s\n" "$timestamp"
    printf "üìä Service: RPS=%-8s AvgLat=%-6sms P99=%-6sms Success=%-3s\n" "$rps" "$avg_latency" "$p99_latency" "$success_rate"
    printf "üíª System:  MEM=%-6sMB CPU=%-6s%% Conn=%-6s\n" "$memory_mb" "$cpu_percent" "$connections"
    printf "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
if ! curl -s "$SERVICE_URL/health" > /dev/null 2>&1; then
    echo "‚ùå Service is not available at $SERVICE_URL"
    echo "Please start the service first"
    exit 1
fi

echo "‚úÖ Service is running, starting monitoring..."
echo ""

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
start_time=$(date +%s)
end_time=$((start_time + DURATION))

while [ $(date +%s) -lt $end_time ]; do
    timestamp=$(date "+%Y-%m-%d %H:%M:%S")

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    service_metrics=$(get_service_metrics)
    system_metrics=$(get_system_metrics)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    display_metrics "$timestamp" "$service_metrics" "$system_metrics"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    echo "$timestamp,$service_metrics,$system_metrics" >> "$CSV_LOG"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
    echo "[$timestamp] Service: $service_metrics | System: $system_metrics" >> "$METRICS_LOG"

    sleep $INTERVAL
done

echo ""
echo "üèÅ Monitoring completed!"
echo "üìÑ Metrics saved to:"
echo "   CSV: $CSV_LOG"
echo "   Log: $METRICS_LOG"
echo ""

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
echo "üìà Performance Summary:"
echo "======================="

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CSV –¥–∞–Ω–Ω—ã–µ
if command -v awk >/dev/null 2>&1; then
    echo "RPS Statistics:"
    awk -F',' 'NR>1 {sum+=$2; if($2>max) max=$2; if(min=="" || $2<min) min=$2} END {
        print "  Average: " (sum/(NR-1))
        print "  Maximum: " max
        print "  Minimum: " min
    }' "$CSV_LOG"

    echo ""
    echo "Latency Statistics (ms):"
    awk -F',' 'NR>1 {sum+=$3; if($3>max) max=$3; if(min=="" || $3<min) min=$3} END {
        print "  Average: " (sum/(NR-1))
        print "  Maximum: " max
        print "  Minimum: " min
    }' "$CSV_LOG"

    echo ""
    echo "Memory Usage (MB):"
    awk -F',' 'NR>1 {sum+=$6; if($6>max) max=$6; if(min=="" || $6<min) min=$6} END {
        print "  Average: " (sum/(NR-1))
        print "  Maximum: " max
        print "  Minimum: " min
    }' "$CSV_LOG"
fi

echo ""
echo "üí° Analysis commands:"
echo "   View CSV: cat $CSV_LOG"
echo "   Plot data: python3 -c \"import pandas as pd; import matplotlib.pyplot as plt; df=pd.read_csv('$CSV_LOG'); df.plot(x='timestamp', y='rps'); plt.show()\""
echo "   Excel import: open $CSV_LOG in Excel/LibreOffice"